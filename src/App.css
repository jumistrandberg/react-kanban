import React, { useState } from 'react';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';

const initialData = {
  todo: [],
  inProgress: [],
  done: []
};

const KanbanBoard = () => {
  const [tasks, setTasks] = useState(initialData);
  const [newTask, setNewTask] = useState('');

  const handleDragEnd = result => {
    const { destination, source, draggableId } = result;

    if (!destination) return;

    if (
      destination.droppableId === source.droppableId &&
      destination.index === source.index
    ) {
      return;
    }

    const start = tasks[source.droppableId];
    const finish = tasks[destination.droppableId];

    if (start === finish) {
      const newTaskIds = Array.from(start);
      newTaskIds.splice(source.index, 1);
      newTaskIds.splice(destination.index, 0, draggableId);

      const newColumn = {
        ...tasks,
        [source.droppableId]: newTaskIds
      };

      setTasks(newColumn);
    } else {
      const startTaskIds = Array.from(start);
      startTaskIds.splice(source.index, 1);
      const newStart = {
        ...tasks,
        [source.droppableId]: startTaskIds
      };

      const finishTaskIds = Array.from(finish);
      finishTaskIds.splice(destination.index, 0, draggableId);
      const newFinish = {
        ...tasks,
        [destination.droppableId]: finishTaskIds
      };

      setTasks({ ...newStart, ...newFinish });
    }
  };

  const handleInputChange = event => {
    setNewTask(event.target.value);
  };

  const handleAddTask = () => {
    if (newTask.trim() !== '') {
      setTasks({
        ...tasks,
        todo: [...tasks.todo, newTask]
      });
      setNewTask('');
    }
  };

  return (
    <div style={{ display: 'flex' }}>
      <DragDropContext onDragEnd={handleDragEnd}>
        <div style={{ margin: 8 }}>
          <h3>Todo</h3>
          <Droppable droppableId="todo">
            {(provided) => (
              <div ref={provided.innerRef} {...provided.droppableProps}>
                {tasks.todo.map((task, index) => (
                  <Draggable key={task} draggableId={task} index={index}>
                    {(provided) => (
                      <div
                        ref={provided.innerRef}
                        {...provided.draggableProps}
                        {...provided.dragHandleProps}
                        style={{
                          border: '1px solid lightgrey',
                          padding: 8,
                          marginBottom: 8,
                          backgroundColor: 'white',
                          ...provided.draggableProps.style
                        }}
                      >
                        {task}
                      </div>
                    )}
                  </Draggable>
                ))}
                {provided.placeholder}
                <input
                  type="text"
                  value={newTask}
                  onChange={handleInputChange}
                  placeholder="Enter new task"
                />
                <button onClick={handleAddTask}>Add</button>
              </div>
            )}
          </Droppable>
        </div>
        <div style={{ margin: 8 }}>
          <h3>In Progress</h3>
          <Droppable droppableId="inProgress">
            {(provided) => (
              <div ref={provided.innerRef} {...provided.droppableProps}>
                {tasks.inProgress.map((task, index) => (
                  <Draggable key={task} draggableId={task} index={index}>
                    {(provided) => (
                      <div
                        ref={provided.innerRef}
                        {...provided.draggableProps}
                        {...provided.dragHandleProps}
                        style={{
                          border: '1px solid lightgrey',
                          padding: 8,
                          marginBottom: 8,
                          backgroundColor: 'white',
                          ...provided.draggableProps.style
                        }}
                      >
                        {task}
                      </div>
                    )}
                  </Draggable>
                ))}
                {provided.placeholder}
              </div>
            )}
          </Droppable>
        </div>
        <div style={{ margin: 8 }}>
          <h3>Done</h3>
          <Droppable droppableId="done">
            {(provided) => (
              <div ref={provided.innerRef} {...provided.droppableProps}>
                {tasks.done.map((task, index) => (
                  <Draggable key={task} draggableId={task} index={index}>
                    {(provided) => (
                      <div
                        ref={provided.innerRef}
                        {...provided.draggableProps}
                        {...provided.dragHandleProps}
                        style={{
                          border: '1px solid lightgrey',
                          padding: 8,
                          marginBottom: 8,
                          backgroundColor: 'white',
                          ...provided.draggableProps.style
                        }}
                      >
                        {task}
                      </div>
                    )}
                  </Draggable>
                ))}
                {provided.placeholder}
              </div>
            )}
          </Droppable>
        </div>
      </DragDropContext>
    </div>
  );
};

export default KanbanBoard;
